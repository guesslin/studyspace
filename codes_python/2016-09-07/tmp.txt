#!/usr/bin/env python
# -*- coding: utf-8 -*-


import re
import unittest
from datetime import datetime

from core.model.Mongo import DB


class TestMongo(unittest.TestCase):

    def setUp(self):
        self.db = DB()
        # Dummy HTTPrecord data
        self.http_data = {'Date': datetime.strptime('2016-06-23', "%Y-%m-%d"),
                          'Client': '192.168.0.2',
                          'DN': 'ICST.NCCST.org',
                          'Uri': '/testuri',
                          'Useragent': 'Test_useragent',
                          'Count': 1
                          }
        # Dummy DNSrecord data
        self.dns_data = {'Date': datetime.strptime('2016-06-23', "%Y-%m-%d"),
                         'Client': '192.168.0.2',
                         'DN': 'ICST.NCCST.org',
                         'NS': '192.168.0.3',
                         'Count': 1
                         }
        # Dummy PDNS data
        self.pdns_data = {'Date': datetime.strptime('2016-06-23', "%Y-%m-%d"),
                          'DN': 'ICST.NCCST.org',
                          'NS': '192.168.0.3',
                          'Answer': '192.168.0.1'
                          }
        # Dummy DN_list data
        self.dnlist_data = {'DN': 'ICST.NCCST.org',
                            'Tags': ['ForTestUse']
                            }
        print "In SetUp"
        # self.db.insert_httprecord(self.http_data).inserted_id
        # self.http_insert = self.db.insert_httprecord(self.http_data).inserted_id
        self.dns_insert = self.db.insert_dnsrecord(self.dns_data).inserted_id
        self.pdns_insert = self.db.insert_pdns(self.pdns_data).inserted_id
        self.dnlist_insert = self.db.insert_dnlist(self.dnlist_data).inserted_id

    def test_insert_mongo(self):

        print self.http_insert

        self.assertNotEqual(None, self.http_insert)
        self.assertNotEqual(None, self.dns_insert)
        self.assertNotEqual(None, self.pdns_insert)
        self.assertNotEqual(None, self.dnlist_insert)

    def test_get_mongo(self):
        http_result = self.db.get_httprecord(self.http_data)
        dns_result = self.db.get_dnsrecord(self.dns_data)
        pdns_result = self.db.get_pdns(self.pdns_data)
        dnlist_result = self.db.get_dnlist(self.dnlist_data)

        print http_result
        for i in http_result:
            print i

        self.assertNotEqual(None, http_result)
        self.assertTrue(re.search("ICST", http_result[0]['DN']))
        self.assertNotEqual(None, dns_result)
        self.assertTrue(re.search("ICST", dns_result[0]['DN']))
        self.assertNotEqual(None, pdns_result)
        self.assertTrue(re.search("ICST", pdns_result[0]['DN']))
        self.assertNotEqual(None, dnlist_result)
        self.assertTrue(re.search("ICST", dnlist_result[0]['DN']))

    """
    def tearDown(self):
        self.db.db.HTTPrecord.remove(self.http_insert.inserted_id)
        self.db.db.DNSrecord.remove(self.dns_insert.inserted_id)
        self.db.db.PDNS.remove(self.pdns_insert.inserted_id)
        self.db.db.DN_list.remove(self.dnlist_insert.inserted_id)
    """
"""
if __name__ == '__main__':
    unittest.main()
"""
